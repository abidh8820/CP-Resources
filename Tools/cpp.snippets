priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p
def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')
	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]
endglobal

snippet file
freopen("in","r",stdin);
freopen("out","w",stdout);
endsnippet

snippet t--
int t;
cin >> t;

while(t--){
	${0}
}
endsnippet

snippet PII
typedef pair<int,int> PII
endsnippet

snippet SEG


typedef long long LL;
const int N = 1 << 18;

LL tree[N * 4], lazy[N * 4], a[N];

LL combine(LL u, LL v){
    return u + v;
}

void build(int u, int st, int en) {
    lazy[u] = 0;
    if (st == en) {
        tree[u] = a[st];  return;
    }
    int mid = (st + en) / 2;
    build(u * 2, st, mid);
    build(u * 2 + 1, mid + 1, en);
    tree[u] = combine(tree[u * 2], tree[u * 2 + 1]);
}

//for max, min query just add lazy * 1;
void propagate(int u,int st, int en) {
    int mid = (st+en)/2;
    lazy[u * 2] += lazy[u];
    tree[u * 2] += lazy[u]*(mid-st+1);   
    lazy[u * 2 + 1] += lazy[u];
    tree[u * 2 + 1] += lazy[u]*(en-mid);
    lazy[u] = 0;
}

void update(int u, int st, int en, int i, int j, int val) {
    if (en < i || st> j) return;
    if (st >= i && en <= j) {
        // for max, min query just add lazy * 1;
        lazy[u] += val; tree[u] += val*(en-st+1);  return;
    }
    propagate(u,st,en);
    int mid = (st + en) / 2;

    update(u * 2, st, mid, i, j, val);
    update(u * 2 + 1, mid + 1, en, i, j, val);
    tree[u] = combine(tree[u * 2], tree[u * 2 + 1]);
}

LL query(int u, int st, int en, int i, int j) {
    if (st > j || en < i) return 0; // return appropriate identity value
    if (st >= i && en <= j) return tree[u];
    propagate(u,st,en);
    int mid = (st + en) / 2;
    return combine(query(u * 2, st, mid, i, j), query(u * 2 + 1, mid + 1, en, i, j));
} 
endsnippet


snippet BIT

struct BIT {
    int n;
    vector<int> bit; 

    BIT(int n) {
        this->n = n;
        bit.resize(n);
    }
    void update(int x, int delta) {
        for (; x <= n; x += x & -x) bit[x] += delta;
    }

    int query(int x) {
        int sum = 0;
        for (; x > 0; x -= x & -x) sum += bit[x];
        return sum;
    }
};

endsnippet

snippet combi
LL fac[N], invfac[N];

void pre() {
	fac[0] = 1;
	for (int i = 1; i < N; i++) fac[i] = (fac[i - 1] * i) % M;
	invfac[N - 1] = BM(fac[N - 1], M - 2);
	for (int i = N - 2; i >= 0; i--) invfac[i] = (invfac[i + 1] * (i + 1)) % M;
}

endsnippet

snippet BM
LL BM(LL a, LL p) {
	if (p == 0) return 1;
	if (p == 1) return a;
	if (p & 1) return (a * BM(a, p - 1)) % M;
	LL f = BM(a, p / 2);
	return (f * f) % M;
}
endsnippet

snippet M
const int M = 1e9 + 7;
endsnippet

snippet N
const int N = 1e${1:6}+7;
endsnippet

snippet LL
typedef long long LL;
endsnippet

snippet MATEXPO
const int M = 1e9 + 7;
typedef long long LL;
int n, m, K;

struct Mat {
    bool a[55][55];
    Mat() { memset(a, 0, sizeof a);}

    Mat(int x) {
        memset(a, 0, sizeof a);
        for (int i = 1; i <= n; i++) a[i][i] = 1;
    }

    Mat operator*(const Mat& b) {
        Mat ret;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= n; k++) {
                    ret.a[i][k] = (ret.a[i][k] + (a[i][j] * b.a[j][k]));
                }
            }
        }
        return ret;
    }
};

Mat bm(Mat a, LL p) {
    if (p == 0) return Mat(1);
    if (p == 1) return a;
    if (p & 1) return a * bm(a, p - 1);
    Mat temp = bm(a, p / 2);
    return temp * temp;
}
endsnippet

snippet KMP
int prefixFunction(const string& s) {
	int n = s.size();
	vector<int> pi(n);
	for (int i = 1; i < n; i++) {
		int j = pi[i - 1];
		while (j > 0 && s[j] != s[i]) j = pi[j - 1];
		if (s[j] == s[i]) j++;
		pi[i] = j;
	}
	return pi[n-1];
}
endsnippet

snippet DSU

const int N = 1e5 + 7;

struct DSU{
    int par[N];
    void init() {
        for (int i = 0; i < N; i++) par[i] = i;
    }

    int find(int u) {
        if (u == par[u]) return u;
        return par[u] = find(par[u]);
    }
    void merge(int u, int v) { par[find(u)] = find(v); }
};

endsnippet


snippet LCA
const int N = 3e5 + 7, K = 20;
vector<int> adj[N];

int anc[N][K];
int level[N];

void dfs(int u, int par) {
    level[u] = level[par] + 1;
    anc[u][0] = par;
    for (int k = 1; k < K; k++) anc[u][k] = anc[anc[u][k - 1]][k - 1];

    for (int v : adj[u]) {
        if (v == par) continue;
        dfs(v, u);
    }
}

int lca(int u, int v) {
    if (level[u] > level[v]) swap(u, v);
    for (int k = K - 1; k >= 0; k--)
        if (level[u] + (1 << k) <= level[v]) v = anc[v][k];

    if (u == v) return u;
    for (int k = K - 1; k >= 0; k--)
        if (anc[u][k] != anc[v][k]) u = anc[u][k], v = anc[v][k];
    return anc[u][0];
}

int getanc(int u, int d) {
    for (int k = 0; k < K; k++)
        if (d & (1 << k)) u = anc[u][k];
    return u;
}

int dist(int u, int v) {
    int g = lca(u, v);
    return level[u] + level[v] - 2 * level[g];
}

endsnippet
snippet sieve
const int N = 1e6+7;

bool flag[N];
vector<int> primes;

void sieve() {
	for(int i=2; i<N; i++){
		if(!flag[i]){
			for(int j=2*i; j<N; j+=i) flag[j] = 1;
			primes.push_back(i);
		}
	}
}
endsnippet

snippet lamda
auto evaluate = [&](LL val) {
};
endsnippet

snippet point
template<typename T>
struct Point {
	T x, y;
	Point(T x = 0, T y = 0) : x(x), y(y) {}

	Point operator+(const Point &u) const { return Point(x + u.x, y + u.y); }
	Point operator-(const Point &u) const { return Point(x - u.x, y - u.y); }
	Point operator*(const long long u) const { return Point(x * u, y * u); }
	Point operator*(const double u) const { return Point(x * u, y * u); }
	Point operator/(const double u) const { return Point(x / u, y / u); }
	
	friend T dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }
	friend T cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }
	friend T length(Point a) { return sqrt(dot(a, a)); }
	friend T sqLength(Point a) { return dot(a, a); }
	friend T distance(Point a, Point b) {return length(a-b);}
	friend T angle(Point u) { return atan2(u.y, u.x); }
	friend istream& operator>>(istream &is, Point &p) {   return is >> p.x >> p.y;}
	friend ostream& operator<<(ostream &os, const Point &p) { return os << p.x << " " << p.y;}
};

int sgn(const long long& x) { return x >= 0 ? x ? 1 : 0 : -1; }
endsnippet


###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# vim:ft=snippets:
